AOP –парадигма программирования, основанная на идее разделения основного и служебного функционала(нефункциональных и внутренних требований (расширяемость, сопровождаемость и т.д.)).
Служебный функционал записывается в Aspect-классы. Имеет свойство тесно «переплетаться» с основной функциональностью).
В основе Aspect заключена сквозная логика(cross-cutting logic=cross-cutting concerns (CCC, ответственности 2-го класса) – функциональность, не относящаяся к бизнес-логике.

К сквозному функционалу относят:
•Логирование
•Проверка прав (security check)
•Обработка транзакций
•Обработка исключений
•Кэширование ...

Pointcut–выражение, описывающее где должен быть применён Advice.
Spring AOP использует AspectJ Pointcutexpression language. Т.е. определённые правила в написании выражений для создания Pointcut
execution( modifiers-pattern? return-type-pattern declaring-type-pattern?
method-name-pattern(parameters-pattern)throws-pattern? )

declaring-type-pattern: полное имя пути класса метода, например com.spring.Aspect;
throws-pattern: тип исключения, выбрасываемого методом, например java.lang.Exception;